%{
open System
open Syntax

let mutable nextLabel = 0

let getNextLabel() : int =
    let ret = nextLabel
    nextLabel <- nextLabel + 1
    ret
%}

%start prog
%type <Statement<unit>> prog

%token <int> INT
%token <string> ID

// (most recent comment, identifier string)
%token LPAREN RPAREN LBRACK RBRACK IF ELSE WHILE BREAK EQUALS SEMICOLON
%token PLUS MINUS TIMES SKIP LT NAND EOF

%left NAND
%left LT
%left MINUS
%nonassoc UMINUS

%% 

bexpr : aexpr LT aexpr { Lt($1, $3) }
      | bexpr NAND bexpr { Nand($1, $3) }
      | LPAREN bexpr RPAREN { $2 }

aexpr : aexpr MINUS aexpr { Minus($1, $3) }
      | INT { Number($1) }
      | ID { Id($1) }
      | LPAREN aexpr RPAREN { $2 }

stat : ID EQUALS aexpr SEMICOLON { Assignment($1, $3, ()) }
     | SKIP SEMICOLON { Skip() }
     | IF LPAREN bexpr RPAREN stat { IfThen($3, $5, ()) } 
     | IF LPAREN bexpr RPAREN stat ELSE stat { IfThenElse($3, $5, $7, ()) }
     | WHILE LPAREN bexpr RPAREN stat { While($3, $5, ()) }
     | BREAK SEMICOLON { Break() }
     | LBRACK statList RBRACK { StatList($2, ()) }

statList : stat statList { $1 :: $2 }
         | stat { [$1] }

prog : statList EOF { StatList($1, ()) }